---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 10 @ 11:59PM
author: "Jiaxin Cheng \\ 905946268"
format:
  html:
    theme: cosmo
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:
```{r}
#| eval: true
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(data.table)
library(lubridate)
library(R.utils)
library(tidyverse)
library(dplyr)
library(ggplot2)
```

MIMIC data location
```{r}
mimic_path <- "~/mimic"
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2023winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

Display the contents of MIMIC data folder. 
```{r}
system(str_c("ls -l ", mimic_path, "/"), intern = TRUE)
system(str_c("ls -l ", mimic_path, "/core"), intern = TRUE)
system(str_c("ls -l ", mimic_path, "/hosp"), intern = TRUE)
system(str_c("ls -l ", mimic_path, "/icu"), intern = TRUE)
```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three programs: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the popular data.table package. 

Which function is fastest? Is there difference in the (default) parsed data types? (Hint: R function `system.time` measures run times.)

For later questions, we stick to the `read_csv` in tidyverse.

```{r}
#| eval: true
system.time(read.csv(str_c(mimic_path,"/core/admissions.csv.gz")))
```

```{r}
#| eval: true
system.time(read_csv(str_c(mimic_path, "/core/admissions.csv.gz"),show_col_types = FALSE))
```

```{r}
#| eval: true
system.time(fread(str_c(mimic_path,"/core/admissions.csv.gz")))
```
**solution**:Compare 3 results, we could fina that fread is the most fast function.read.csv in base R will typically parse all variables as characters by default, while read_csv in the tidyverse and fread in data.table will attempt to automatically detect and parse the correct data types based on the contents of the file. 

## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/icu/icustays.csv.gz"), 
    " | head"
    ), 
  intern = TRUE
)
```

1. Import `icustays.csv.gz` as a tibble `icustays_tble`. 
```{r}
icustays_tble <- read_csv(str_c(mimic_path, "/icu/icustays.csv.gz"),show_col_types = FALSE)
print(icustays_tble, width=Inf)
```
**Solution**: I use read_csv to import "icustays.csv.gz" as a tibble "icustays_tble".

2. How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? 
```{r}
#| eval: true
unique_subjects <- n_distinct(icustays_tble$subject_id)
unique_subjects
```
**Solution**: There are total 51350 unique 'subject_id'. and for one subject_id, it can have multiple ICU stays.

3. Summarize the number of ICU stays per `subject_id` by graphs.
```{r}
stays_per_subject <- icustays_tble %>%
  group_by(subject_id) %>%
  summarize(n = n())
ggplot(stays_per_subject, aes(x = n)) +
  geom_histogram(binwidth = 1) +
  xlab("Number of ICU Stays") +
  ylab("Count")
```
**solution**: I use Histogram. And must patients have only one ICU stay.

4. For each `subject_id`, let's only keep the first ICU stay in the tibble `icustays_tble`. (Hint: `slice_min` and `slice_max` may take long. Think alternative ways to achieve the same function.)
```{r}
#| eval: true
icustays_tble <- icustays_tble %>%
  group_by(subject_id) %>%
  arrange(intime, .by_group = FALSE)%>%
  slice_head(n=1)%>%
  print(width = Inf)
```

## Q3. `admission` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/core/admissions/> for details of each field in this file. The first 10 lines are
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/core/admissions.csv.gz"), 
    " | head"
    ), 
  intern = TRUE
)
```

1. Import `admissions.csv.gz` as a tibble `admissions_tble`.
```{r}
admissions_tble <- read_csv(str_c(mimic_path, "/core/admissions.csv.gz"),show_col_types = FALSE)
print(admissions_tble,width = Inf)
```
**Solution**:I use read_csv to import `admissions.csv.gz` as a tibble `admissions_tble`.

2. Let's only keep the admissions that have a match in `icustays_tble` according to `subject_id` and `hadmi_id`.
```{r}
admissions_tble <- admissions_tble %>%
  semi_join(icustays_tble, by = c("subject_id", "hadm_id")) %>%
  print(width = Inf)
```
**solution**: this result provide a 53150 * 15 tibble


3. Summarize the following variables by graphics. 

    - admission year 
```{r}
ggplot(admissions_tble, aes(x = as.factor(year(admittime)))) + 
  geom_bar(fill = "blue") + 
  labs(x = "Admission Year", y = "Count") + 
  ggtitle("Admission Year Distribution")
```
  
    - admission month  
```{r}
ggplot(admissions_tble, aes(x = as.factor(month(admittime)))) + 
  geom_bar(fill = "blue") + 
  labs(x = "Admission month", y = "Count") + 
  ggtitle("Admission month Distribution")
```    

    - admission month day  
```{r}
ggplot(admissions_tble, aes(x = as.factor(mday(admittime)))) + 
  geom_bar(fill = "blue") + 
  labs(x = "Admission month day", y = "Count") + 
  ggtitle("Admission month day Distribution")
```    

    - admission week day  
```{r}
ggplot(admissions_tble, aes(x = as.factor(wday(admittime)))) + 
  geom_bar(fill = "blue") + 
  labs(x = "Admission week day", y = "Count") + 
  ggtitle("Admission weak day Distribution")
```    
    
    - admission hour (anything unusual?)
```{r}
ggplot(admissions_tble, aes(x = as.factor(hour(admittime)))) + 
  geom_bar(fill = "blue") + 
  labs(x = "Admission hour", y = "Count") + 
  ggtitle("Admission hour Distribution")
```
**Solution**: 0 and 7 is very high in period from 12am to 12pm.

    - admission minute (anything unusual?)
```{r}
ggplot(admissions_tble, aes(x = as.factor(minute(admittime)))) + 
  geom_bar(fill = "blue") + 
  labs(x = "Admission minute", y = "Count") + 
  ggtitle("Admission minute Distribution")
```    
**Solution**: 0, 15, 30 and 45 is very high.    
    
    - length of hospital stay (anything unusual?)   
```{r}
admissions_tble <- admissions_tble %>%
  mutate(Length_of_stays = as.numeric(difftime(dischtime, admittime, units = "hours")))
ggplot(admissions_tble, aes(x = Length_of_stays)) + 
  geom_histogram(binwidth = 100) + 
  labs(x = "Length of hospital stay (hours)", y = "Count") + 
  ggtitle("Length of hospital stay Distribution")
```
**Solution**: Almost all of the data is concentrated on the far left side.


## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/core/patients/> for details of each field in this file. The first 10 lines are
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/core/patients.csv.gz"), 
    " | head"
    ), 
  intern = TRUE
)
```

1. Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/core/patients/>) as a tibble `patients_tble` and only keep the patients who have a match in `icustays_tble` (according to `subject_id`).
```{r}
patients_tble <- read_csv(str_c(mimic_path, "/core/patients.csv.gz"),show_col_types = FALSE)
patients_tble <- patients_tble %>%
  arrange(subject_id) %>%
  semi_join(icustays_tble, by = "subject_id")%>%
  print(width=Inf)
```

2. Summarize variables `gender` and `anchor_age`, and explain any patterns you see.
```{r}
ggplot(patients_tble, aes(x = gender, fill = gender)) +
  geom_bar() +
  labs(x = "Gender", y = "Count") +
  ggtitle("Gender Distribution") +
  scale_fill_manual(values = c("F"="pink", "M"="blue"))
ggplot(patients_tble, aes(x = anchor_age, fill = gender)) + 
  geom_histogram(binwidth = 1) + 
  labs(x = "Anchor age", y = "Count") + 
  ggtitle("Anchor age distribution by gender") +
  scale_fill_manual(values = c("F" = "pink", "M" = "blue"))
```

**Solution**: We have more male patients then female patients. And the max age have a large number of patients.

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/hosp/labevents.csv.gz"), 
    " | head"
    ), 
  intern = TRUE
)
```
`d_labitems.csv.gz` is the dictionary of lab measurements. 
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/hosp/d_labitems.csv.gz"), 
    " | head"
    ), 
  intern = TRUE
)
```

1. Find how many rows are in `labevents.csv.gz`.
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/hosp/labevents.csv.gz"), 
    " | tail -n +2 | wc -l"
    ), 
  intern = TRUE
)
```
**Solution**: there are total 122103667 row in labevents.csv.gz

2. We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` only containing these items for the patients in `icustays_tble` as a tibble `labevents_tble`. 

    Hint: `labevents.csv.gz` is a data file too big to be read in by the `read_csv` function in its default setting. Utilize the `col_select` option in the `read_csv` function to reduce the memory burden. It took my computer 5-10 minutes to ingest this file. If your computer really has trouble importing `labevents.csv.gz`, you can import from the reduced data file `labevents_filtered_itemid.csv.gz`.
```{r}
dlabitems_tble <- read_csv(str_c(mimic_path,
"/hosp/d_labitems.csv.gz"), show_col_types = FALSE) %>%
  filter(itemid %in% c(
    50912,
    50971,
    50983,
    50902,
    50882,
    51221,
    51301,
    50931
    )) %>%
  print(width = Inf)
```

```{r}
system.time(
  labevents_tble <-
    read_csv(str_c(mimic_path,
"/hosp/labevents_filtered_itemid.csv.gz"),
              col_select = c(subject_id, itemid, charttime,
valuenum),
              col_types = cols_only(subject_id = col_double(),
                                    itemid = col_double(),
                                    charttime = col_datetime(),
                                    valuenum = col_double())
              )%>%
    semi_join(icustays_tble, by = c("subject_id")) %>%
    filter(itemid %in% dlabitems_tble$itemid) %>%
    print(width = Inf)
)
```
**Solution**: Dr.Zhou provide the solution of this question.

3. Further restrict `labevents_tble` to the first lab measurement during the ICU stay. 
```{r}
labevents_tble1 <- labevents_tble %>%
  left_join(select(icustays_tble, subject_id, intime, outtime),
by = c("subject_id"))%>%
  filter(charttime >= intime & charttime <= outtime) %>%
  group_by(subject_id, itemid) %>%
  arrange(charttime, .by_group = TRUE) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  select(-intime, -outtime, -charttime) %>%
  pivot_wider(names_from = itemid, values_from = valuenum) %>%
  rename_at(
    vars(as.character(dlabitems_tble$itemid)),
    ~str_to_lower(dlabitems_tble$label)
  ) %>%
  print(width = Inf)
```
**Solution**: Dr.Zhou provide solution of this question.

4. Summarize the lab measurements by appropriate numerics and graphics. 
```{r}
summary(labevents_tble1)
```

```{r}
labevents_tble1 %>%
  select(2,3,7,8) %>%
  gather(key, value) %>%
  filter(is.finite(value) & value >= 0 & value <= 200) %>%
  ggplot(aes(x = value)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~key, scales = "free_y") +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
labevents_tble1 %>%
  select(4,6) %>%
  gather(key, value) %>%
  filter(is.finite(value) & value >= 0 & value <= 40) %>%
  ggplot(aes(x = value)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~key, scales = "free_y") +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
labevents_tble1 %>%
  select(5) %>%
  gather(key, value) %>%
  filter(is.finite(value) & value >= 0 & value <= 2500) %>%
  ggplot(aes(x = value)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~key, scales = "free_y") +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
labevents_tble1 %>%
  select(9) %>%
  gather(key, value) %>%
  filter(is.finite(value) & value >= 0 & value <= 600) %>%
  ggplot(aes(x = value)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~key, scales = "free_y") +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
```

## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/icu/chartevents.csv.gz"), 
    " | head"), 
  intern = TRUE
)
```
`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`. 
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/icu/d_items.csv.gz"), 
    " | head"), 
  intern = TRUE
)
```

1. We are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble` as a tibble `chartevents_tble`.

    Hint: `chartevents.csv.gz` is a data file too big to be read in by the `read_csv` function in its default setting. Utilize the `col_select` option in the `read_csv` function to reduce the memory burden. It took my computer >15 minutes to ingest this file. If your computer really has trouble importing `labevents.csv.gz`, you can import from the reduced data file `chartevents_filtered_itemid.csv.gz`.
```{r}
d_items_tble <- read_csv(str_c(mimic_path,
"/icu/d_items.csv.gz"), show_col_types = FALSE) %>%
  filter(itemid %in% c(
    220045,
    220181,
    220179,
    223761,
    220210
    )) %>%
  print(width = Inf)
```

```{r}
system.time(
  chartevents_tble <-
    read_csv(str_c(mimic_path,
"/icu/chartevents_filtered_itemid.csv.gz"),
              col_select = c(subject_id, itemid, charttime,
hadm_id, valuenum),
              col_types = cols_only(subject_id = col_double(),
                                    itemid = col_double(),
                                    hadm_id = col_double(),
                                    charttime = col_datetime(),
                                    valuenum = col_double())
              )%>%
    semi_join(icustays_tble, by = c("subject_id")) %>%
    filter(itemid %in% d_items_tble$itemid) %>%
    print(width = Inf)
)
```
**Solution**: I answer this base on the solution of Q5 that provide by Dr.Zhou

2. Further restrict `chartevents_tble` to the first vital measurement during the ICU stay. 
```{r}
chartevents_tble1 <- chartevents_tble %>%
  left_join(select(icustays_tble, subject_id, intime, outtime),
by = c("subject_id"))%>%
  filter(charttime >= intime & charttime <= outtime) %>%
  group_by(subject_id, itemid) %>%
  arrange(charttime, .by_group = TRUE) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  select(-intime, -outtime, -charttime) %>%
  pivot_wider(names_from = itemid, values_from = valuenum) %>%
  rename_at(
    vars(as.character(d_items_tble$itemid)),
    ~str_to_lower(d_items_tble$label)
  ) %>%
  print(width = Inf)
```
**Solution**: I answer this base on the solution of Q5 that provide by Dr.Zhou

3. Summarize these vital measurements by appropriate numerics and graphics.
```{r}
summary(chartevents_tble1)
```

```{r}
chartevents_tble1 %>%
  select(3) %>%
  gather(key, value) %>%
  filter(is.finite(value) & value >= 0 & value <= 1000) %>%
  ggplot(aes(x = value)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~key, scales = "free_y") +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
chartevents_tble1 %>%
  select(4) %>%
  gather(key, value) %>%
  filter(is.finite(value) & value >= 0 & value <= 1000) %>%
  ggplot(aes(x = value)) +
  geom_histogram(binwidth = 5) +
  facet_wrap(~key, scales = "free_y") +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
chartevents_tble1 %>%
  select(5) %>%
  gather(key, value) %>%
  filter(is.finite(value) & value >= 0 & value <= 1000) %>%
  ggplot(aes(x = value)) +
  geom_histogram(binwidth = 5) +
  facet_wrap(~key, scales = "free_y") +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
chartevents_tble1 %>%
  select(6) %>%
  gather(key, value) %>%
  filter(is.finite(value) & value >= 0 & value <= 200) %>%
  ggplot(aes(x = value)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~key, scales = "free_y") +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
chartevents_tble1 %>%
  select(7) %>%
  gather(key, value) %>%
  filter(is.finite(value) & value >= 0 & value <= 120) %>%
  ggplot(aes(x = value)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~key, scales = "free_y") +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
```

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are the first ICU stay of each unique adult (age at admission > 18) and columns contain at least following variables  

- all variables in `icustays.csv.gz`  
- all variables in `admission.csv.gz`  
- all variables in `patients.csv.gz`  
- first lab measurements during ICU stay  
- first vital measurements during ICU stay
- an indicator variable `thirty_day_mort` whether the patient died within 30 days of hospital admission (30 day mortality)

```{r}
mimic_icu_cohort <- icustays_tble %>%
    left_join(admissions_tble, by = c("subject_id", "hadm_id")) %>%
    left_join(patients_tble, by = c("subject_id")) %>%
    left_join(labevents_tble1, by = c("subject_id")) %>%
    left_join(chartevents_tble1, by = c("subject_id")) %>%
    mutate(age_at_admission = anchor_age + year(admittime) - anchor_year) %>%
    filter(age_at_admission > 18) %>%
    mutate(thirty_day_mort = 
         ifelse(is.na(deathtime), "FALSE", 
                ifelse(difftime(deathtime, admittime, units = "days") <= 30, 
                       "TRUE", "FALSE"))) %>%
  select(-hadm_id.y)%>%
    print(width = Inf)
```
**Solution**: during the process, I found there are two variables, they are hadm_id.x and hadm_id.y, they have the same value, so I decide delete hadm_id.y.


## Q8. Exploratory data analysis (EDA)

Summarize following information using appropriate numerics or graphs.

- `thirty_day_mort` vs demographic variables (ethnicity, language, insurance, marital_status, gender, age at hospital admission)
```{r}
prop.table(table(mimic_icu_cohort$gender, mimic_icu_cohort$thirty_day_mort))
prop.table(table(mimic_icu_cohort$age_hadm, mimic_icu_cohort$thirty_day_mort))
prop.table(table(mimic_icu_cohort$marital_status, mimic_icu_cohort$thirty_day_mort))
prop.table(table(mimic_icu_cohort$insurance, mimic_icu_cohort$thirty_day_mort))
prop.table(table(mimic_icu_cohort$language, mimic_icu_cohort$thirty_day_mort))
prop.table(table(mimic_icu_cohort$ethnicity, mimic_icu_cohort$thirty_day_mort))
```

- `thirty_day_mort` vs first lab measurements
```{r}
mimic_icu_cohort %>%
  select(27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 43) %>%
  gather(key = key, value = value, -thirty_day_mort) %>%
  filter(!is.na(value)) %>%
  filter(value > quantile(value, 0.025, na.rm = TRUE) 
         & value < quantile(value, 0.975, na.rm = TRUE)) %>%
  group_by(key, thirty_day_mort) %>%
  summarize()
```

- `thirty_day_mort` vs first vital measurements
```{r}
mimic_icu_cohort %>%
  select(37, 38, 39, 40, 41, 43) %>%
  gather(key = key, value = value, -thirty_day_mort) %>%
  filter(!is.na(value)) %>%
  filter(value > quantile(value, 0.025, na.rm = TRUE) 
         & value < quantile(value, 0.975, na.rm = TRUE)) %>%
  group_by(key, thirty_day_mort) %>%
  summarize()  
```

- `thirty_day_mort` vs first ICU unit
```{r}
prop.table(table(mimic_icu_cohort$first_careunit, mimic_icu_cohort$thirty_day_mort))
```