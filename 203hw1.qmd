---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 27 @ 11:59PM
author: "Jiaxin Cheng\\  905946268"
format:
  html:
    theme: cosmo
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:
```{r}
#| eval: true
sessionInfo()
```


## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1. Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2. Create a **private** repository `biostat-203b-2023-winter` and add `Hua-Zhou` and `tomokiokuno0528` as your collaborators with write permission.

3. Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `master` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `master` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in `main` branch.

4. After each homework due date, course reader and instructor will check out your `master` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5. After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

**Solution** : Done

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data](https://mimic-iv.mit.edu), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. (Hint: The CITI training takes a couple hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Report URL**: https://www.citiprogram.org/verify/?kcef6cd6e-fa3b-4ec7-afe9-9c9bf93e01c3-53879823

**Certificate URL**: https://www.citiprogram.org/verify/?w6ae6a149-257c-4e37-ba37-938eec2942cf-53879823 




## Q3. Linux Shell Commands

1. The `~/mimic` folder within the Docker container contains data sets from MIMIC-IV. Refer to the documentation <https://mimic.mit.edu/docs/iv/> for details of data files.  
```{bash}
#| eval: false
ls -l ~/mimic
```
Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files on storage and are not big data friendly practices. Just read from the data folder `~/mimic` directly in following exercises. 

**Solution** :

```{bash}
#| eval: true
ls -l ~/mimic
```

  Use Bash commands to answer following questions.

2. Display the contents in the folders `core`, `hosp`, `icu`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

**Solution**

```{bash}
#| eval: true
ls -l ~/mimic/core
ls -l ~/mimic/hosp
ls -l ~/mimic/icu
```

**Reason**:The .csv.gz file is a compressed file of .csv, the computer can store more files


3. Briefly describe what bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

**zcat**: For viewing compressed files.

**zless & zmore**: Implement the same functionality as 'more' and 'less' on compressed files.

**zgrep**: Search compressed files for a regular expression.


4. What's the output of the following bash script?
```{bash}
#| eval: false
for datafile in ~/mimic/core/*.gz
do
  ls -l $datafile
done
```
**Solution**: the command list detail of all the .gz file in ~/mimic/core


Display the number of lines in each data file using a similar loop.

**Solution**:
```{bash}
#| eval: true
for datafile in ~/mimic/core/*.gz
do
  gzcat $datafile | wc -l
done
```


5. Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

**Solution**:
```{bash}
#| eval: true
  gzcat ~/mimic/core/admissions.csv.gz | head -5
```
```{bash}
#| eval: true
  gzcat ~/mimic/core/admissions.csv.gz | wc -l
```

```{bash}
#| eval: true
 gzcat ~/mimic/core/admissions.csv.gz | awk -F "," '{print $1 | "sort | uniq"}' | wc -l
```


6. What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on.)

**solution**:

**adimission_typ**
```{bash}
#| eval: true
  gzcat ~/mimic/core/admissions.csv.gz | awk -F "," '{print $6 | "sort | uniq -c"}' 
```

**adimission_location**
```{bash}
#| eval: true
  gzcat ~/mimic/core/admissions.csv.gz | awk -F "," '{print $7 | "sort | uniq -c"}' 
```

**insurance**
```{bash}
#| eval: true
  gzcat ~/mimic/core/admissions.csv.gz | awk -F "," '{print $9 | "sort | uniq -c"}' 
```

**ethnicity**
```{bash}
#| eval: true
  gzcat ~/mimic/core/admissions.csv.gz | awk -F "," '{print $12 | "sort | uniq -c"}' 
```
## Q4. Who's popular in Price and Prejudice

1. You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder. 
```{bash}
#| eval: false
curl https://www.gutenberg.org/cache/epub/42671/pg42671.txt
```
Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.

 **Solution**: since "wget -nc" not work, Dr.zhou suggest me use " curl" to instead of "wget -nc". And I think "curl" and "wget" have same function. They both can enables data exchange between a device and a server through a terminal. By google, "-nc" mean if the file exist, not retrieved the file again.
 
```{bash}
#| eval: false
curl https://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  cat pg42671.txt|grep $char|wc -l
done
```

2. What's the difference between the following two commands?
```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```
and
```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```

 **Solution**: For fisrt command, no matter how many times it is run, only one "hello, world" wiil appear. For second command, if the command run 'x' times, then 'x' times "hello, world" will appear in the text
 
3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:
```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```
Using `chmod` to make the file executable by the owner, and run
```{bash}
#| eval: false
chome 777 ./middle.sh
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

**Solution**: output is 5 lines of ./middle.sh 

$1=pg42671.txt, $2=20, $3=5

decide use which shell to execute



## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2021`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

```{bash}
#| eval: true
cal
## calender of current month
```


```{bash}
#| eval: true
cal 2021
## calender of 2021
```

```{bash}
#| eval: true
cal 9 1752 
## It don't have 3-13. Becayse in September 1752, Julian Calender was replaced with Gregorian Calender by British Empire. Julian Calender was 11 days behind Gregorian Calender.
```

```{bash}
#| eval: true
date
## current time
```

```{bash}
#| eval: true
hostname 
## the hostname of the server
```

```{bash}
#| eval: true
arch
## the architecture of the Linux machine
```

```{bash}
#| eval: true
uname -a
## displays all information on your system 
```

```{bash}
#| eval: true
uptime
## the running time, the number of users, and the average system load on Linux.
```

```{bash}
#| eval: true
who am i
## user name and current time 
```

```{bash}
#| eval: true
who
## first log-in time and last log-in time
```

```{bash}
#| eval: true
w
## rovides a quick summary of every user logged into a computer, what each user is currently doing, and what load all the activity is imposing on the computer itself.
```

```{bash}
#| eval: true
id
## find out user and group names and numeric IDâ€™s (UID or group ID) of the current user or any other user in the server
```

```{bash}
#| eval: true
last | head
## list of the last ten logged-in users in the newest order. 
```

```{bash}
#| eval: true
echo {con,pre}{sent,fer}{s,ed}
## all combination of above texts
```

```{bash}
#| eval: false
sleep time 5
## suspends the calling process of the next command for a specified amount of time
```
