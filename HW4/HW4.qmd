---
title: "Biostat 203B Homework 4"
subtitle: Due Mar 24 @ 11:59PM
author: "Jiaxin Cheng // 905946268"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information:
```{r}
#| eval: false

sessionInfo()
```
Load database libraries and the tidyverse frontend:
```{r}
#| eval: false

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(tidymodels))
suppressPackageStartupMessages(library(lubridate))
```

## Predicting 30-day mortality

Using the ICU cohort `icu_cohort.rds` you built in Homework 3, develop at least three analytic approaches for predicting the 30-day mortality of patients admitted to ICU using demographic information (gender, age, marital status, ethnicity), first lab measurements during ICU stay, and first vital measurements during ICU stay. For example, you can use (1) logistic regression with elastic net (lasso + ridge) penalty (e.g., glmnet or keras package), (2) random forest, (3) boosting, and (4) support vector machines, or (5) MLP neural network (keras package)

1. Partition data into 50% training set and 50% test set. Stratify partitioning according the 30-day mortality status.

```{r}
library(GGally)
library(gtsummary)
library(tidyverse)
library(tidymodels)
library()

icu_cohort <- read_rds("/Users/chengjiaxin/Desktop/Biostat203b/HW/HW3/mimiciv_shiny/icu_cohort.rds")
```
**solution**: Load data.

```{r}
selected_vars = c("gender", "age_at_admission", "marital_status", "ethnicity",
              "thirty_day_mort",
              "L50912",
              "L50971", 
              "L50983", 
              "L50902", 
              "L50882", 
              "L51221", 
              "L51301", 
              "L50931",
              "C220045", 
              "C220181", 
              "C220179", 
              "C223761", 
              "C220210")
icu_cohort_use <- icu_cohort[, selected_vars]
icu_cohort_use$thirty_day_mort <- as.factor(icu_cohort_use$thirty_day_mort)
icu_cohort_use <- na.omit(icu_cohort_use)
```
**solution**: Only keep the variables that we need. Since we have large observations, so I decide delete those incomplete row.

```{r}
set.seed(203)

data_split <- initial_split(
  icu_cohort_use, 
  strata = "thirty_day_mort", 
  prop = 0.5
  )
data_split
icu_cohort_other <- training(data_split)
dim(icu_cohort_other)
icu_cohort_test <- testing(data_split)
dim(icu_cohort_test)
```
**solution**: Split dataset into train and test.

2. Train and tune the models using the training set.

(1). Random Forest Approach
```{r}
rf_recipe <- 
  recipe(
    thirty_day_mort ~ ., 
    data = icu_cohort_other
  ) %>%
  step_zv(all_numeric_predictors()) %>%
  prep(training = icu_cohort_other, retain = TRUE)
rf_recipe
```

```{r}
rf_mod <- 
  rand_forest(
    mode = "classification",
    mtry = tune(),
    trees = tune()
  ) %>% 
  set_engine("ranger")
rf_mod
```

```{r}
rf_wf <- workflow() %>%
  add_recipe(rf_recipe) %>%
  add_model(rf_mod)
rf_wf
```

```{r}
param_grid <- grid_regular(
  trees(range = c(100L, 500L)), 
  mtry(range = c(2L, 8L)),
  levels = c(3, 5)
  )
param_grid
```

```{r}
set.seed(203)

folds <- vfold_cv(icu_cohort_other, v = 5)
folds
```

```{r}
rf_fit <- rf_wf %>%
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )
rf_fit
```

```{r}
rf_fit %>%
  collect_metrics() %>%
  print(width = Inf) %>%
  filter(.metric == "roc_auc") %>%
  ggplot(mapping = aes(x = trees, y = mean, color = mtry)) +
  geom_point() + 
  # geom_line() + 
  labs(x = "Num. of Trees", y = "CV AUC")
```

```{r}
rf_fit %>%
  show_best("roc_auc")
```

```{r}
best_rf <- rf_fit %>%
  select_best("roc_auc")
best_rf
```

```{r}
final_wf <- rf_wf %>%
  finalize_workflow(best_rf)
final_wf
```

```{r}
final_fit <- 
  final_wf %>%
  last_fit(data_split)
final_fit
```

```{r}
final_fit %>% 
  collect_metrics()
```

(2).Boosting Approach
```{r}
gb_recipe <- 
  recipe(
    thirty_day_mort ~ ., 
    data = icu_cohort_other
  ) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_zv(all_numeric_predictors()) %>% 
  prep(training = icu_cohort_other, retain = TRUE)
gb_recipe
```

```{r}
gb_mod <- 
  boost_tree(
    mode = "classification",
    trees = 1000, 
    tree_depth = tune(),
    learn_rate = tune()
  ) %>% 
  set_engine("xgboost")
gb_mod
```

```{r}
gb_wf <- workflow() %>%
  add_recipe(gb_recipe) %>%
  add_model(gb_mod)
gb_wf
```

```{r}
param_grid <- grid_regular(
  tree_depth(range = c(1L, 3L)),
  learn_rate(range = c(-5, 2), trans = log10_trans()),
  levels = c(3, 10)
  )
param_grid
```

```{r}
set.seed(203)

folds <- vfold_cv(icu_cohort_other, v = 5)
folds
```

```{r}
gb_fit <- gb_wf %>%
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )
gb_fit
```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

3. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each model.